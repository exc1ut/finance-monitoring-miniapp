/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * My Expenses
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  ReportListSchemaOut
} from '.././entities';

import { customInstance } from '../../axios-instance';
import type { ErrorType } from '../../axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary By Account
 */
export const appApiReportByAccount = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ReportListSchemaOut[]>(
      {url: `/api/v1/report/by-account`, method: 'GET', signal
    },
      options);
    }
  

export const getAppApiReportByAccountQueryKey = () => {
    return [`/api/v1/report/by-account`] as const;
    }

    
export const getAppApiReportByAccountQueryOptions = <TData = Awaited<ReturnType<typeof appApiReportByAccount>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppApiReportByAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appApiReportByAccount>>> = ({ signal }) => appApiReportByAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData> & { queryKey: QueryKey }
}

export type AppApiReportByAccountQueryResult = NonNullable<Awaited<ReturnType<typeof appApiReportByAccount>>>
export type AppApiReportByAccountQueryError = ErrorType<unknown>


/**
 * @summary By Account
 */

export function useAppApiReportByAccount<TData = Awaited<ReturnType<typeof appApiReportByAccount>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppApiReportByAccountQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAppApiReportByAccountSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof appApiReportByAccount>>, TError = ErrorType<unknown>>( options?: { query?:UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppApiReportByAccountQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appApiReportByAccount>>> = ({ signal }) => appApiReportByAccount(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData> & { queryKey: QueryKey }
}

export type AppApiReportByAccountSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof appApiReportByAccount>>>
export type AppApiReportByAccountSuspenseQueryError = ErrorType<unknown>


/**
 * @summary By Account
 */

export function useAppApiReportByAccountSuspense<TData = Awaited<ReturnType<typeof appApiReportByAccount>>, TError = ErrorType<unknown>>(
  options?: { query?:UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiReportByAccount>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppApiReportByAccountSuspenseQueryOptions(options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



