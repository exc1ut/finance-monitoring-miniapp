/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * My Expenses
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  AppApiTransactionTransactionListParams,
  DefaultResponseSchema,
  PagedTransactionListSchema,
  UpdateCategoryTransactionSchema
} from '.././entities';

import { customInstance } from '../../axios-instance';
import type { ErrorType, BodyType } from '../../axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Transaction List
 */
export const appApiTransactionTransactionList = (
    params?: AppApiTransactionTransactionListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<PagedTransactionListSchema>(
      {url: `/api/v1/transaction/list`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getAppApiTransactionTransactionListQueryKey = (params?: AppApiTransactionTransactionListParams,) => {
    return [`/api/v1/transaction/list`, ...(params ? [params]: [])] as const;
    }

    
export const getAppApiTransactionTransactionListQueryOptions = <TData = Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError = ErrorType<unknown>>(params?: AppApiTransactionTransactionListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppApiTransactionTransactionListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appApiTransactionTransactionList>>> = ({ signal }) => appApiTransactionTransactionList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData> & { queryKey: QueryKey }
}

export type AppApiTransactionTransactionListQueryResult = NonNullable<Awaited<ReturnType<typeof appApiTransactionTransactionList>>>
export type AppApiTransactionTransactionListQueryError = ErrorType<unknown>


/**
 * @summary Transaction List
 */

export function useAppApiTransactionTransactionList<TData = Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError = ErrorType<unknown>>(
 params?: AppApiTransactionTransactionListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppApiTransactionTransactionListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getAppApiTransactionTransactionListSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError = ErrorType<unknown>>(params?: AppApiTransactionTransactionListParams, options?: { query?:UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppApiTransactionTransactionListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appApiTransactionTransactionList>>> = ({ signal }) => appApiTransactionTransactionList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData> & { queryKey: QueryKey }
}

export type AppApiTransactionTransactionListSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof appApiTransactionTransactionList>>>
export type AppApiTransactionTransactionListSuspenseQueryError = ErrorType<unknown>


/**
 * @summary Transaction List
 */

export function useAppApiTransactionTransactionListSuspense<TData = Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError = ErrorType<unknown>>(
 params?: AppApiTransactionTransactionListParams, options?: { query?:UseSuspenseQueryOptions<Awaited<ReturnType<typeof appApiTransactionTransactionList>>, TError, TData>, request?: SecondParameter<typeof customInstance>}

  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getAppApiTransactionTransactionListSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions) as  UseSuspenseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update Category
 */
export const appApiTransactionUpdateCategory = (
    updateCategoryTransactionSchema: BodyType<UpdateCategoryTransactionSchema>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DefaultResponseSchema>(
      {url: `/api/v1/transaction/update-category`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateCategoryTransactionSchema
    },
      options);
    }
  


export const getAppApiTransactionUpdateCategoryMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>, TError,{data: BodyType<UpdateCategoryTransactionSchema>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>, TError,{data: BodyType<UpdateCategoryTransactionSchema>}, TContext> => {
    
const mutationKey = ['appApiTransactionUpdateCategory'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>, {data: BodyType<UpdateCategoryTransactionSchema>}> = (props) => {
          const {data} = props ?? {};

          return  appApiTransactionUpdateCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AppApiTransactionUpdateCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>>
    export type AppApiTransactionUpdateCategoryMutationBody = BodyType<UpdateCategoryTransactionSchema>
    export type AppApiTransactionUpdateCategoryMutationError = ErrorType<unknown>

    /**
 * @summary Update Category
 */
export const useAppApiTransactionUpdateCategory = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>, TError,{data: BodyType<UpdateCategoryTransactionSchema>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof appApiTransactionUpdateCategory>>,
        TError,
        {data: BodyType<UpdateCategoryTransactionSchema>},
        TContext
      > => {

      const mutationOptions = getAppApiTransactionUpdateCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    